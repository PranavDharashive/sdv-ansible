---
- name: Load kernel modules
  ansible.builtin.copy:
    content: |
      overlay
      br_netfilter
    dest: /etc/modules-load.d/containerd.conf
    mode: '0644'

- name: Apply kernel modules
  ansible.builtin.command: modprobe {{ item }}
  loop:
    - overlay
    - br_netfilter

- name: Configure sysctl for Kubernetes
  ansible.builtin.copy:
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1
    dest: /etc/sysctl.d/kubernetes.conf
    mode: '0644'

- name: Apply sysctl parameters
  ansible.builtin.command: sysctl --system

- name: Remove old Docker apt repository file if it exists
  ansible.builtin.file:
    path: /etc/apt/sources.list.d/docker.list
    state: absent

- name: Remove old Docker GPG key if it exists
  ansible.builtin.file:
    path: /etc/apt/keyrings/docker.gpg
    state: absent

- name: Update apt package index
  ansible.builtin.apt:
    update_cache: yes

- name: Create /etc/apt/keyrings directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Add Docker GPG key
  ansible.builtin.shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc

- name: Set permissions on Docker GPG key
  ansible.builtin.file:
    path: /etc/apt/keyrings/docker.asc
    mode: 'a+r'

- name: Add Docker apt repository
  ansible.builtin.shell: echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

- name: Install Docker packages
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  loop:
    - docker-ce
    - docker-ce-cli
    - containerd.io

- name: Create docker daemon config directory
  ansible.builtin.file:
    path: /etc/docker
    state: directory

- name: Configure Docker to use systemd cgroup driver
  ansible.builtin.copy:
    dest: /etc/docker/daemon.json
    content: |
      {
        "exec-opts": ["native.cgroupdriver=systemd"],
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "100m"
        },
        "storage-driver": "overlay2"
      }
  notify: Restart docker

- name: Create containerd config directory
  ansible.builtin.file:
    path: /etc/containerd
    state: directory

- name: Generate default containerd config if it doesn't exist
  ansible.builtin.shell: containerd config default | sudo tee /etc/containerd/config.toml
  args:
    creates: /etc/containerd/config.toml

- name: Configure containerd to use systemd cgroup driver
  ansible.builtin.lineinfile:
    path: /etc/containerd/config.toml
    regexp: '^\s*SystemdCgroup = false'
    line: '            SystemdCgroup = true'
    state: present

- name: Enable CRI plugin in containerd
  ansible.builtin.replace:
    path: /etc/containerd/config.toml
    regexp: 'disabled_plugins = ["cri"]'
    replace: 'disabled_plugins = []'
  notify: Restart containerd

- name: Add Kubernetes GPG key
  ansible.builtin.apt_key:
    url: "https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/Release.key"
    keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    state: present

- name: Add Kubernetes APT repository
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/ /"
    state: present

- name: Install Kubernetes components
  ansible.builtin.apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: yes

- name: Hold Kubernetes packages
  ansible.builtin.command: apt-mark hold kubelet kubeadm kubectl

- name: Initialize the Kubernetes cluster
  ansible.builtin.command: >
    kubeadm init
    --pod-network-cidr=10.244.0.0/16
    --apiserver-advertise-address={{ kube_api_server_ip }}
  args:
    creates: /etc/kubernetes/admin.conf

- name: Configure kubeconfig for the current user
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.kube"
    state: directory
    mode: '0755'

- name: Copy admin.conf to user's kubeconfig
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: "{{ ansible_env.HOME }}/.kube/config"
    remote_src: yes
    owner: "{{ ansible_env.USER }}"
    group: "{{ ansible_env.USER }}"
    mode: '0644'

- name: Install Calico CNI (tigera-operator.yaml)
  ansible.builtin.command: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/tigera-operator.yaml
  args:
    creates: /etc/kubernetes/manifests/calico-kube-controllers.yaml # A file created by Calico operator

- name: Install Calico CNI (custom-resources.yaml)
  ansible.builtin.command: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/custom-resources.yaml
  args:
    creates: /etc/kubernetes/manifests/calico-node.yaml # A file created by Calico operator

- name: Remove control-plane taint
  ansible.builtin.command: kubectl taint nodes --all node-role.kubernetes.io/control-plane-
  register: taint_result
  changed_when: "'taint \"node-role.kubernetes.io/control-plane\" successfully removed' in taint_result.stdout"
  failed_when: "'error' in taint_result.stderr and 'not found' not in taint_result.stderr"

- name: Handlers for service restarts
  ansible.builtin.meta: flush_handlers
